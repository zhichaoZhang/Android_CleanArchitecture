/**
 * 此文件用途
 * 统一各个Module中构建依赖资源配置
 * 1、Android构建相关版本
 * 2、依赖的第三方库名称及版本
 *
 * 使用方法
 * @code{
 * def rootConfig = rootProject.extensions.getByName("ext")
 *     rootConfig.androidCompileSdkVersion
 *     rootConfig.androidBuildToolsVersion
 *     ...
 *}
 */

allprojects {
    repositories {
        jcenter()
    }
}

ext {
    //Android Property
    androidBuildToolsVersion = "28.0.3"
    androidMinSdkVersion = 17
    androidTargetSdkVersion = 28
    androidCompileSdkVersion = 28

    //Library
    androidSupportVersion = "27.1.1"
    androidAnnotationVersion = "1.1.0-alpha02"
    androidMaterialVersion = "1.1.0-alpha05"
    daggerVersion = '2.23.1'
    butterKnifeVersion = '10.1.0'
    recyclerViewVersion = '1.1.0-alpha03'
    rxJavaVersion = '2.2.7'
    rxAndroidVersion = '2.0.2'
    javaxAnnotationVersion = '1.0'
    javaxInjectVersion = '1'
    constraintLayoutVersion = '2.0.0-alpha3'
    retrofitVersion = '2.4.0'//Retrofit2自带OkHttpClient依赖
    roomVersion = '2.1.0-alpha04'//数据库

    //Testing
    robolectricVersion = '3.8'
    jUnitVersion = '4.12'
    assertJVersion = '1.7.1'
    mockitoVersion = '2.1.0'
    dexmakerVersion = '1.0'
    espressoVersion = '3.2.0-alpha02'
    testingSupportLibVersion = '0.1'
    testRunnerVersion = '1.1.2-alpha02'
    testMonitorVersion = '1.1.2-alpha02'

    //Development
    leakCanaryVersion = '1.5.4'
    stethoVersion = "1.5.1"

    appDependencies = [
            dagger               : "com.google.dagger:dagger:${daggerVersion}",
            daggerCompiler       : "com.google.dagger:dagger-compiler:${daggerVersion}",
            daggerAndroid        : "com.google.dagger:dagger-android:${daggerVersion}",
            daggerAndroidCompiler: "com.google.dagger:dagger-android-processor:${daggerVersion}",
            daggerAndroidSupport : "com.google.dagger:dagger-android-support:${daggerVersion}",
            butterKnife          : "com.jakewharton:butterknife:${butterKnifeVersion}",
            butterKnifeCompiler  : "com.jakewharton:butterknife-compiler:${butterKnifeVersion}",
            recyclerView         : "androidx.recyclerview:recyclerview:${recyclerViewVersion}",
            rxJava               : "io.reactivex.rxjava2:rxjava:${rxJavaVersion}",
            rxAndroid            : "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}",
            appCompatV7          : "com.android.support:appcompat-v7:${androidSupportVersion}",
            constraintLayout     : "androidx.constraintlayout:constraintlayout:${constraintLayoutVersion}",
            supportDesign        : "com.google.android.material:material:${androidMaterialVersion}",
    ]

    appTestDependencies = [
            junit            : "junit:junit:${jUnitVersion}",
            mockito          : "org.mockito:mockito-core:${mockitoVersion}",
            dexmaker         : "com.google.dexmaker:dexmaker:${dexmakerVersion}",
            dexmakerMockito  : "com.google.dexmaker:dexmaker-mockito:${dexmakerVersion}",
            espresso         : "androidx.test.espresso:espresso-core:${espressoVersion}",
            testingSupportLib: "com.android.support.test:testing-support-lib:${testingSupportLibVersion}",
            robolectric      : "org.robolectric:robolectric:${robolectricVersion}",
            testMonitor      : "androidx.test:monitor:${testMonitorVersion}",
    ]

    domainDependencies = [
            javaxAnnotation: "javax.annotation:jsr250-api:${javaxAnnotationVersion}",
            javaxInject    : "javax.inject:javax.inject:${javaxInjectVersion}",
            rxJava         : "io.reactivex.rxjava2:rxjava:${rxJavaVersion}",
            room           : "androidx.room:room-runtime:${roomVersion}",
    ]

    domainTestDependencies = [
            junit  : "junit:junit:${jUnitVersion}",
            mockito: "org.mockito:mockito-core:${mockitoVersion}",
            assertj: "org.assertj:assertj-core:${assertJVersion}"
    ]

    dataDependencies = [
            daggerCompiler       : "com.google.dagger:dagger-compiler:${daggerVersion}",
            dagger               : "com.google.dagger:dagger:${daggerVersion}",
            rxAndroid            : "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}",
            androidAnnotations   : "androidx.annotation:annotation:${androidAnnotationVersion}",
            retrofit             : "com.squareup.retrofit2:retrofit:${retrofitVersion}",
            retrofitRxjavaAdapter: "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}",
            retrofitGsonConverter: "com.squareup.retrofit2:converter-gson:${retrofitVersion}",
            room                 : "androidx.room:room-runtime:${roomVersion}",
            roomCompiler         : "androidx.room:room-compiler:${roomVersion}",
            roomRxjava2          : "androidx.room:room-rxjava2:${roomVersion}",
            stetho               : "com.facebook.stetho:stetho:${stethoVersion}",
            stethoOkHttp         : "com.facebook.stetho:stetho-okhttp3:${stethoVersion}",
    ]

    dataTestDependencies = [
            junit             : "junit:junit:${jUnitVersion}",
            assertj           : "org.assertj:assertj-core:${assertJVersion}",
            mockito           : "org.mockito:mockito-core:${mockitoVersion}",
            robolectric       : "org.robolectric:robolectric:${robolectricVersion}",
            room              : "android.arch.persistence.room:testing:${roomVersion}",
            testRunner        : "androidx.test:runner:${testRunnerVersion}",
            androidAnnotations: "androidx.annotation:annotation:${androidAnnotationVersion}",
    ]

    developmentDependencies = [
            leakCanary: "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}",
    ]
}

